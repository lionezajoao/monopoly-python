name: Build Test Executable
on:
    push:
        branches: [release]
    pull_request:
        branches: [release]
permissions:
    contents: write
jobs:
    build:
        runs-on: ${{ matrix.os }}
        strategy:
            matrix:
                os: [ubuntu-latest, windows-latest, macos-latest]
        steps:
            - name: Checkout code
              uses: actions/checkout@v4
            - name: Set up Python
              uses: actions/setup-python@v5
              with:
                  python-version: "3.11"
            - name: Install dependencies
              run: |
                  python -m pip install --upgrade pip
                  pip install pygame pyinstaller pytest
            - name: Run tests (Linux/macOS)
              if: runner.os != 'Windows'
              run: |
                  export PYTHONPATH=$PYTHONPATH:$(pwd)/app
                  pytest
            - name: Run tests (Windows)
              if: runner.os == 'Windows'
              run: |
                $env:PYTHONPATH="$env:PYTHONPATH;$(Get-Location)\app"
                pytest
              shell: pwsh
            - name: Build executable with PyInstaller
              run: |
                  pyinstaller --onefile --name Monopoly app/main.py
            - name: Rename executable for identification
              run: |
                  if [ "${{ runner.os }}" = "Linux" ]; then
                    mv dist/Monopoly dist/Monopoly-linux
                  elif [ "${{ runner.os }}" = "macOS" ]; then
                    mv dist/Monopoly dist/Monopoly-macos
                  elif [ "${{ runner.os }}" = "Windows" ]; then
                    mv dist/Monopoly.exe dist/Monopoly-windows.exe
                  fi
              shell: bash
            - name: Upload artifact
              uses: actions/upload-artifact@v4
              with:
                  name: monopoly-executable-${{ matrix.os }}
                  path: dist/Monopoly*

    upload:
        needs: build
        runs-on: ubuntu-latest
        if: github.ref == 'refs/heads/release' && github.event_name == 'push'
        steps:
            - name: Checkout code
              uses: actions/checkout@v4
            - name: Download all artifacts
              uses: actions/download-artifact@v4
              with:
                  path: artifacts
            - name: List downloaded artifacts (debug)
              run: |
                  echo "Estrutura dos artifacts baixados:"
                  find artifacts -type f -name "*" | head -20
                  echo "Conte√∫do detalhado:"
                  ls -la artifacts/*/
            - name: Upload to DigitalOcean Spaces
              uses: s3cmd-sync-action@v1
              with:
                  args: --acl-public --recursive
                  source_dir: artifacts
                  destination_dir: /
                  access_key: ${{ secrets.DO_SPACES_ACCESS_KEY }}
                  secret_key: ${{ secrets.DO_SPACES_SECRET_KEY }}
                  endpoint: ${{ secrets.DO_SPACES_ENDPOINT }}
                  bucket: ${{ secrets.DO_SPACES_BUCKET }}

